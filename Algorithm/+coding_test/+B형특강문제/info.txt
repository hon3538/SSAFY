1. Sqrt Decomposition (Bucket)
전체 영역을 몇개의 구간으로 나눠서, 구간별 search, lazy, 값 업데이트를 구현할 수 있어야 함
일반적으로 루트 N이 최적값일 경우가 많다.

2. 우선 순위 관리 (PQ)
node들을 특정 기준에 맞춰 우선순위를 관리한다.
set이나 priorityQueue(STL)을 상요한다면, 문제를 쉽게 풀 수 있음

3. 트리 탐색 (BFS/DFS/LCA)
전체적인 자료구조가 트리이며, 각 API 에서 BFS, DFS, LCA 등을 활용하기를 요구함

4. 최단경로
플로이드-워셜이나 다익스트라를 활용해서 최단거리를 찾는 유형
다익스트라의 경우 최근 단순 다익스트라 알고리즘을 적용하는 유형은 지양되고, 중간에 탈출조건이 들어가거나 하는 식으로 최적화가 필요한 유형이 늘어나는 추세.
알고리즘의 동작방식을 이해해야함

5. String
문자열 자르고 붙이고, 문자열 기반으로 정렬하고, 문자열 치환, 알파벳순으로 문자들 관리 Hash로... 
또 문자열의 prefix를 잘 관리해서 문자열마다 우선순위 관리를 해야 하는 경우도 있음
이 유형은 구현해야 할 것이 워낙 다양할 수 있어서 추천하지 않습니다.
만약 이 유형을 노리신다면 Trie 구현법에 대해 마스터하시는게 좋습니다.

6. Union Find
Root를 찾고, 두 개의 집합을 하나로 합치는 문제 유형
여러 개의 그룹이 Merge가 빈번하게 발생하는 경우
여러 개의 Group이 있는 상황에서, 하나의 Group으로 Merge가 필요한 경우
