OOP(객체지향 프로그래밍) 코드 구조
-> 인터페이스(정의부) + 구현부 + 앱


Q. 이 구조로 나누어서 작성하는 이유는 ? 장점은?
-> 보안(캡슐화에 장점), 재사용과 유지보수


개발 완료하고 배포할 때 소스코드를 넘기지 않음(내용이 다 노출됨)
-> 따라서 인터페이스 복사본 + 컴파일된 구현파일(0101..)을 넘김
-> 사용자는 링킹해서 실행파일을 만듦


객체 생성 방법 2 가지
1) Circle circle1; → stack 에 선언
2) Circle *circle1 = new Circle(); → heap 에 선언

class는 데이터가 방대하기 때문에 , heap 메모리를 사용하는 것을 권장한다

